{"version":3,"sources":["gallery.js","js.js"],"names":["Gallery","[object Object]","options","this","carouselContent","$","Object","assign","carouselIndex","carouselLength","children","length","isAnimating","itemWidth","firstItem","lastItem","firstClone","lastClone","css","transition","x","each","key","item","on","moveLeft","moveRight","prependTo","appendTo","remove","clone","addClass","validationMethods","field","args","valLength","value","sign","then","message","mustContainNumbers","test","mustContainLetters","inTemplate","RegExp","fieldsCompatible","field1","document","querySelector","Form","formEl","rules","selectControlOptions","formName","submitButtonName","rulesStorage","selectControlOptionsStorage","addEventListener","e","formSubmit","request","JSONRequest","getData","data","fillSelects","validate","preventDefault","isValid","rule","inputEl","selector","method","methods","errMessage","name","setInvalidField","setValidField","cl","classList","add","hintWrap","parentNode","createElement","appendChild","textContent","control","$el","id","content","type","option","append","autocomplete","minLength","source","url","callback","ajax","dataType","success","error","Request","showMessage","console","log","Review","errorSelector","initHandlers","commentID","target","attr","delete","submit","val","$div","empty","get","comments","forEach","$commentArea","class","parseJSON","approved","text","user","data-id","comment","render","foundCommentURL","fail","caption","dialog","title","ready","init","datepicker","showAnim"],"mappings":"AAAA,aACA,MAAAA,QACAC,YAAAC,EAAA,IACAC,KAAAD,QAAA,CACAE,gBAAAC,EAAA,uBAEAC,OAAAC,OAAAJ,KAAAD,QAAAA,GAEAC,KAAAC,gBAAAD,KAAAD,QAAAE,gBACAD,KAAAK,cAAA,EACAL,KAAAM,eAAAN,KAAAC,gBAAAM,WAAAC,OACAR,KAAAS,aAAA,EACAT,KAAAU,UAAA,IAAAV,KAAAM,eACAN,KAAAW,UAAAT,EAAAF,KAAAC,gBAAAM,WAAA,IACAP,KAAAY,SAAAV,EAAAF,KAAAC,gBAAAM,WAAAP,KAAAM,eAAA,IACAN,KAAAa,WAAA,KACAb,KAAAc,UAAA,KAGAhB,OAEAE,KAAAC,gBAAAc,IAAA,QAAA,IAAAf,KAAAM,eAAA,KAEAN,KAAAC,gBAAAe,WAAA,CACAC,KAAAjB,KAAAK,eAAAL,KAAAU,cACA,GAEAR,EAAAgB,KAAAlB,KAAAC,gBAAAM,WAAA,CAAAY,EAAAC,IACAlB,EAAAkB,GAAAL,IAAA,QAAAf,KAAAU,UAAA,MAGAR,EAAA,cAAAmB,GAAA,QAAA,IAAArB,KAAAsB,YACApB,EAAA,eAAAmB,GAAA,QAAA,IAAArB,KAAAuB,aAGAzB,WACA,IAAAE,KAAAS,YAKA,OAFAT,KAAAS,aAAA,EACAT,KAAAK,iBACA,IAAAL,KAAAK,eACAL,KAAAY,SAAAY,UAAAxB,KAAAC,iBACAD,KAAAC,gBAAAe,WAAA,CACAC,MAAAjB,KAAAK,cAAA,IAAAL,KAAAU,cACA,GACAV,KAAAC,gBAAAe,WAAA,CACAC,MAAAjB,KAAAK,cAAA,IAAAL,KAAAU,cACA,IAAA,gBAAA,KACAV,KAAAK,cAAAL,KAAAM,eAAA,EACAN,KAAAY,SAAAa,SAAAzB,KAAAC,iBACAD,KAAAC,gBAAAe,WAAA,CACAC,KAAAjB,KAAAK,eAAAL,KAAAU,cACA,GACAV,KAAAS,aAAA,KAGAT,KAAAC,gBAAAe,WAAA,CACAC,KAAAjB,KAAAK,eAAAL,KAAAU,cACA,IAAA,gBAAA,IACAV,KAAAS,aAAA,GAKAX,YACA,IAAAE,KAAAS,YAKA,OAFAT,KAAAS,aAAA,EACAT,KAAAK,gBACAL,KAAAC,gBAAAe,WAAA,CACAC,KAAAjB,KAAAK,eAAAL,KAAAU,cACA,IAAA,gBAAA,KACAV,KAAAS,aAAA,EACAT,KAAAa,YACAb,KAAAK,cAAA,EACAL,KAAAC,gBAAAe,WAAA,CACAC,KAAAjB,KAAAK,eAAAL,KAAAU,cACA,GACAV,KAAAa,WAAAa,SACA1B,KAAAa,WAAA,KACAb,KAAAM,eAAAN,KAAAC,gBAAAM,WAAAC,OACAR,KAAAU,UAAA,IAAAV,KAAAM,eACAN,KAAAC,gBAAAc,IAAA,QAAA,IAAAf,KAAAM,eAAA,UACAJ,EAAAgB,KAAAlB,KAAAC,gBAAAM,WAAA,CAAAY,EAAAC,IACAlB,EAAAkB,GAAAL,IAAA,QAAAf,KAAAU,UAAA,OAIAV,KAAAK,gBAAAL,KAAAM,eAAA,GACAN,KAAAM,iBACAN,KAAAU,UAAA,IAAAV,KAAAM,eACAN,KAAAa,WAAAb,KAAAW,UAAAgB,QACA3B,KAAAa,WAAAe,SAAA,SACA5B,KAAAa,WAAAY,SAAAzB,KAAAC,iBACAD,KAAAC,gBAAAc,IAAA,QAAA,IAAAf,KAAAM,eAAA,KACAJ,EAAAgB,KAAAlB,KAAAC,gBAAAM,WAAA,CAAAY,EAAAC,IACAlB,EAAAkB,GAAAL,IAAA,QAAAf,KAAAU,UAAA,MAEAV,KAAAC,gBAAAe,WAAA,CACAC,KAAAjB,KAAAK,eAAAL,KAAAU,cACA,SAZA,KCzEA,MAAAmB,kBAAA,CAOA/B,OAAAgC,EAAAC,GAEA,MAAAC,EAAAF,EAAAG,MAAAzB,OACA0B,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GAGA,IAAAK,EAAA,KACA,OAAAF,GACA,IAAA,IACAF,EAAAG,IACAC,6BAAAD,EAAA,MAEA,MACA,IAAA,IACAH,EAAAG,IACAC,8BAAAD,EAAA,MAEA,MACA,IAAA,KACAH,GAAAG,IACAC,6BAAAD,MAEA,MACA,IAAA,KACAH,GAAAG,IACAC,8BAAAD,MAEA,MACA,IAAA,KACAH,IAAAG,IACAC,kCAAAD,eAMA,OAAAC,GAQAC,mBAAAP,GACA,QAAAQ,KAAAR,EAAAG,OAAA,KAAA,qCASAM,mBAAAT,GAEA,sBAAAQ,KAAAR,EAAAG,OAAA,KAAA,qCASAO,WAAA,CAAAV,EAAAC,IAGA,IAAAU,OAAAV,EAAA,GAAA,KAAAO,KAAAR,EAAAG,OAAA,2CAAAF,EAAA,MASAW,iBAAA,CAAAC,EAAAZ,IACAY,EAAAV,QAAAW,SAAAC,cAAAd,EAAA,IAAAE,MAAA,qBAAA,MAQA,MAAAa,KAIAhD,cACAE,KAAA+C,OAAA,KACA/C,KAAAgD,MAAA,KACAhD,KAAAiD,qBAAA,KAUAnD,KAAAoD,EAAAC,EAAAC,EAAAC,GAEArD,KAAA+C,OAAAH,SAAAC,cAAAK,GACAlD,KAAA+C,OAAAO,iBAAAH,EAAAI,GAAAvD,KAAAwD,WAAAD,IAGA,MAAAE,EAAA,IAAAC,YACAD,EAAAE,QAAAP,EAAAQ,GAAA5D,KAAAgD,MAAAY,GACAH,EAAAE,QAAAN,EAAAO,IACA5D,KAAAiD,qBAAAW,EACA5D,KAAA6D,gBAQA/D,WAAAyD,GAEAvD,KAAA8D,YACAP,EAAAQ,iBAOAjE,WAEA,IAAAkE,GAAA,EAEA,IAAA,IAAAC,KAAAjE,KAAAgD,MAAA,CAEA,MAAAkB,EAAAtB,SAAAC,cAAAoB,EAAAE,UAEA,IAAA,IAAAC,KAAAH,EAAAI,QAAA,CAEA,MAAAC,EAAAzC,kBAAAuC,EAAAG,MAAAL,EAAAE,EAAArC,MACA,GAAAuC,EAAA,CAEAtE,KAAAwE,gBAAAN,EAAAI,GAEAN,GAAA,EAEA,MAGAhE,KAAAyE,cAAAP,IAMA,OAAAF,EAQAlE,gBAAAoE,EAAA9B,GAEA,MAAAsC,EAAAR,EAAAS,UACAD,EAAAhD,OAAA,YACAgD,EAAAE,IAAA,cAGA,IAAAC,EAAAX,EAAAY,WAAAjC,cAAA,qBACAgC,KACAA,EAAAjC,SAAAmC,cAAA,QACAJ,UAAAC,IAAA,oBACAV,EAAAY,WAAAE,YAAAH,IAGAA,EAAAI,YAAA7C,EAOAtC,cAAAoE,GAEA,MAAAQ,EAAAR,EAAAS,UACAD,EAAAhD,OAAA,cACAgD,EAAAE,IAAA,YAMA9E,cACA,IAAA,IAAAoF,KAAAlF,KAAAiD,qBAAA,CACA,MAAAkC,EAAAjF,EAAAgF,EAAAE,IACAC,EAAAH,EAAAG,QACA,OAAAH,EAAAI,MACA,IAAA,UACA,IAAA,IAAAC,KAAAF,EACAF,EAAAK,yBAAAD,MAAAA,cAEA,MACA,IAAA,eACAJ,EAAAM,aAAA,CACAC,UAAA,EACAC,OAAAN,OAQA,MAAA3B,YACA5D,QAAA8F,EAAAC,GACA3F,EAAA4F,KAAA,CACAF,IAAAA,EACAN,KAAA,MACAS,SAAA,OACAC,QAAAH,EACAI,MAAA,SAAA1C,GACA2C,QAAAC,YAAA,mCAAAP,QAMA9F,kBAAA8F,EAAAC,GACA3F,EAAA4F,KAAA,CACAF,IAAAA,EACAN,KAAA,MACAS,SAAA,OACAC,QAAAH,EACAI,MAAA,SAAA1C,GACA6C,QAAAC,IAAA9C,OASA,MAAA+C,OAMAxG,YAAA8F,EAAAW,GACAvG,KAAA4F,IAAAA,EACA5F,KAAAuG,cAAAA,EACAvG,KAAAwG,eAMA1G,eACAI,EAAA,aAAAmB,GAAA,QAAA,UAAAkC,IACA,MAAAkD,EAAAvG,EAAAqD,EAAAmD,QAAAC,KAAA,WACA3G,KAAA4G,OAAAH,GACAlD,EAAAQ,mBAGA7D,EAAA,aAAAmB,GAAA,QAAA,SAAAkC,IACA,MAAAkD,EAAAvG,EAAAqD,EAAAmD,QAAAC,KAAA,WACA3G,KAAA6G,OAAAJ,GACAlD,EAAAQ,mBAGA7D,EAAA,WAAAmB,GAAA,QAAAkC,IACAvD,KAAA4E,IAAA1E,EAAA,cAAA4G,MAAA5G,EAAA,iBAAA4G,OAEAvD,EAAAQ,mBASAjE,SACA,MAAAiH,EAAA7G,EAAA,aACA6G,EAAAC,QACA9G,EAAA+G,IAAAjH,KAAA4F,IAAA,GAAA,SAAAsB,GACAA,EAAAC,QAAA,SAAA/F,GACA,MAAAgG,EAAAL,EAAAvB,OACAtF,EAAA,UAAA,CACAmH,MAAA,yBAEAD,EAAA5B,OACAtF,EAAA,UAAA,CACAmH,qBAAAnH,EAAAoH,UAAAlG,EAAAmG,UAAA,UAAA,kCAGA/B,OACAtF,EAAA,UAAA,CACAsH,KAAA,cAAApG,EAAAqG,KACAJ,MAAA,yBAGA7B,OACAtF,EAAA,UAAA,CACAsH,KAAA,eAAApG,EAAAgE,GACAiC,MAAA,yBAGA7B,OACAtF,EAAA,UAAA,CACAsH,KAAApG,EAAAoG,KACAH,MAAA,iCAIAnH,EAAAoH,UAAAlG,EAAAmG,UACAH,EAAA5B,OACAtF,EAAA,UAAA,CACAmH,MAAA,cAGAD,EAAA5B,OACAtF,EAAA,aAAA,CACAmH,MAAA,yCACA/B,KAAA,SACAoC,UAAAtG,EAAAgE,GACAoC,KAAA,WAEAhC,OACAtF,EAAA,UAAA,CACAmH,MAAA,cAIAD,EACA5B,OACAtF,EAAA,aAAA,CACAmH,MAAA,yCACA/B,KAAA,SACAoC,UAAAtG,EAAAgE,GACAoC,KAAA,eAKA,QAQA1H,IAAA2H,EAAAD,GACA,MAAAG,EAAA,CACAF,KAAAA,EACAD,KAAAA,EACAD,UAAA,GAEArH,EAAA4F,KAAA,CACAR,KAAA,OACAM,IAAA5F,KAAA4F,IACAhC,KAAA+D,EACA3B,QAAA,IAAAhG,KAAA4H,SACA3B,MAAA,IAAAjG,KAAAmG,YAAAnG,KAAAuG,cAAA,gEAAA,YAUAzG,OAAA2H,EAAAD,EAAApC,GACA,MAAAuC,EAAA,CACAvC,GAAAA,EACAqC,KAAAA,EACAD,KAAAA,EACAD,UAAA,GAGA,GAAA,KAAAnC,EAAA,CAEA,MAAAyC,EAAA7H,KAAA4F,IAAAR,EACAlF,EAAA+G,IAAAY,EAAA,GAAAX,IACAhH,EAAA4F,KAAA,CACAR,KAAA,QACAM,IAAAiC,EACAjE,KAAA+D,EACA3B,QAAA,IAAAhG,KAAA4H,SACA3B,MAAA,IAAAjG,KAAAmG,YAAAnG,KAAAuG,cAAA,kEAAA,aAEA,QAAAuB,KAAA,KACA5H,EAAA4F,KAAA,CACAR,KAAA,OACAM,IAAA5F,KAAA4F,IACAhC,KAAA+D,EACA3B,QAAA,IAAAhG,KAAA4H,SACA3B,MAAA,IAAAjG,KAAAmG,YAAAnG,KAAAuG,cAAA,gEAAA,mBAIAvG,KAAA4E,IAAA6C,EAAAD,GAQA1H,OAAAsF,GACAlF,EAAA4F,KAAA,CACAR,KAAA,QACAM,IAAA5F,KAAA4F,IAAAR,EACAxB,KAAA,CACA2D,UAAA,GAEAvB,QAAA,IAAAhG,KAAA4H,SACA3B,MAAA,IAAAjG,KAAAmG,YAAAnG,KAAAuG,cAAA,oEAAA,YAQAzG,OAAAsF,GACAlF,EAAA4F,KAAA,CACAR,KAAA,SACAM,IAAA5F,KAAA4F,IAAAR,EACAY,QAAA,IAAAhG,KAAA4H,SACA3B,MAAA,IAAAjG,KAAAmG,YAAAnG,KAAAuG,cAAA,kEAAA,YAUAzG,YAAAsF,EAAAhD,EAAA2F,GACA7H,EAAAkF,GAAA4C,OAAA,CACAC,MAAAF,IAEAP,KAAApF,IAIAlC,EAAA0C,UAAAsF,MAAA,MAEA,IAAApF,MAEAqF,KAAA,WAAA,SAAA,+BAAA,0CAGA,IAAA7B,OAAA,kCAAA,YACAsB,SAKA1H,EAAA,aAAAkI,WAAA,CACAC,SAAA,WAIA,IAAAxI,QAAA,CACAI,gBAAAC,EAAA,wBAEAiI","file":"main.min.js","sourcesContent":["\"use strict\"\r\nclass Gallery {\r\n    constructor(options = {}) {\r\n        this.options = {\r\n            carouselContent: $(\".carousel__content\")\r\n        };\r\n        Object.assign(this.options, options);\r\n\r\n        this.carouselContent = this.options.carouselContent;\r\n        this.carouselIndex = 0\r\n        this.carouselLength = this.carouselContent.children().length;\r\n        this.isAnimating = false;\r\n        this.itemWidth = 100 / this.carouselLength;\r\n        this.firstItem = $(this.carouselContent.children()[0]);\r\n        this.lastItem = $(this.carouselContent.children()[this.carouselLength - 1]);\r\n        this.firstClone = null;\r\n        this.lastClone = null;\r\n    }\r\n\r\n    init() {\r\n        // Apply the 3D transformations to avoid a white blink when you slide for the first time\r\n        this.carouselContent.css(\"width\", this.carouselLength * 100 + \"%\");\r\n\r\n        this.carouselContent.transition({\r\n            x: `${this.carouselIndex * -this.itemWidth}%`\r\n        }, 0);\r\n\r\n        $.each(this.carouselContent.children(), (key, item) => {\r\n            return $(item).css(\"width\", this.itemWidth + \"%\");\r\n        });\r\n\r\n        $(\".nav--left\").on(\"click\", () => this.moveLeft());\r\n        $(\".nav--right\").on(\"click\", () => this.moveRight());\r\n    }\r\n\r\n    moveLeft() {\r\n        if (this.isAnimating) {\r\n            return;\r\n        }\r\n        this.isAnimating = true;\r\n        this.carouselIndex--;\r\n        if (this.carouselIndex === -1) {\r\n            this.lastItem.prependTo(this.carouselContent);\r\n            this.carouselContent.transition({\r\n                x: `${(this.carouselIndex + 2) * -this.itemWidth}%`\r\n            }, 0);\r\n            return this.carouselContent.transition({\r\n                x: `${(this.carouselIndex + 1) * -this.itemWidth}%`\r\n            }, 1000, \"easeInOutExpo\", () => {\r\n                this.carouselIndex = this.carouselLength - 1;\r\n                this.lastItem.appendTo(this.carouselContent);\r\n                this.carouselContent.transition({\r\n                    x: `${this.carouselIndex * -this.itemWidth}%`\r\n                }, 0);\r\n                return this.isAnimating = false;\r\n            });\r\n        } else {\r\n            return this.carouselContent.transition({\r\n                x: `${this.carouselIndex * -this.itemWidth}%`\r\n            }, 1000, \"easeInOutExpo\", () => {\r\n                return this.isAnimating = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    moveRight() {\r\n        if (this.isAnimating) {\r\n            return;\r\n        }\r\n        this.isAnimating = true;\r\n        this.carouselIndex++;\r\n        return this.carouselContent.transition({\r\n            x: `${this.carouselIndex * -this.itemWidth}%`\r\n        }, 1000, \"easeInOutExpo\", ()=> {\r\n            this.isAnimating = false;\r\n            if (this.firstClone) {\r\n                this.carouselIndex = 0;\r\n                this.carouselContent.transition({\r\n                    x: `${this.carouselIndex * -this.itemWidth}%`\r\n                }, 0);\r\n                this.firstClone.remove();\r\n                this.firstClone = null;\r\n                this.carouselLength = this.carouselContent.children().length;\r\n                this.itemWidth = 100 / this.carouselLength;\r\n                this.carouselContent.css(\"width\", this.carouselLength * 100 + \"%\");\r\n                $.each(this.carouselContent.children(), (key, item) => {\r\n                    return $(item).css(\"width\", this.itemWidth + \"%\");\r\n                });\r\n                return;\r\n            }\r\n            if (this.carouselIndex === this.carouselLength - 1) {\r\n                this.carouselLength++;\r\n                this.itemWidth = 100 / this.carouselLength;\r\n                this.firstClone = this.firstItem.clone();\r\n                this.firstClone.addClass(\"clone\");\r\n                this.firstClone.appendTo(this.carouselContent);\r\n                this.carouselContent.css(\"width\", this.carouselLength * 100 + \"%\");\r\n                $.each(this.carouselContent.children(), (key, item) => {\r\n                    return $(item).css(\"width\", this.itemWidth + \"%\");\r\n                });\r\n                return this.carouselContent.transition({\r\n                    x: `${this.carouselIndex * -this.itemWidth}%`\r\n                }, 0);\r\n            }\r\n        });\r\n\r\n    }\r\n}","\"use strict\";\r\n\r\n/*\r\n * ** - При нажатии на кнопку «Отправить» произвести валидацию полей следующим образом:\r\n * - Имя содержит только буквы;\r\n * ** - Телефон подчиняется шаблону +7(000)000-0000;**\r\n * ** - E-mail выглядит как mymail@mail.ru, или my.mail@mail.ru, или my-mail@mail.ru**\r\n * ** - Текст произвольный;**\r\n * (!) отошел от задания, вместо произвольного текста, проверка пароля на наличие заглавной буквы, строчной буквы и цифры\r\n *  и проверки по длине\r\n * ** - В случае не прохождения валидации одним из полей необходимо выделять это поле красной рамкой\r\n * и сообщать пользователю об ошибке.**\r\n * */\r\n\r\n/**\r\n * Object contains validation methods.\r\n */\r\nconst validationMethods = {\r\n    /**\r\n     * Метод проверки поля по длине.\r\n     * @param {HTMLInputElement} field Поле, которое надо проверить.\r\n     * @param {Array} args Массив с аргументами.\r\n     * @returns {string|null} Строку с ошибкой или null, если ошибки не было.\r\n     */\r\n    length(field, args) {\r\n        // Получаем длину текста в поле.\r\n        const valLength = field.value.length,\r\n            sign = args[0],\r\n            then = args[1];\r\n\r\n        // Перебираем знак и если сравнение не сработает, записываем ошибку.\r\n        let message = null;\r\n        switch (sign) {\r\n            case '>':\r\n                if (!(valLength > then)) {\r\n                    message = `Минимальная длина поля: ${then + 1}.`;\r\n                }\r\n                break;\r\n            case '<':\r\n                if (!(valLength < then)) {\r\n                    message = `Максимальная длина поля: ${then - 1}.`;\r\n                }\r\n                break;\r\n            case '>=':\r\n                if (!(valLength >= then)) {\r\n                    message = `Минимальная длина поля: ${then}.`;\r\n                }\r\n                break;\r\n            case '<=':\r\n                if (!(valLength <= then)) {\r\n                    message = `Максимальная длина поля: ${then}.`;\r\n                }\r\n                break;\r\n            case '==':\r\n                if (valLength !== then) {\r\n                    message = `Длина поля должна равняться: ${then} символам.`;\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Возвращаем ошибку.\r\n        return message;\r\n    },\r\n\r\n    /**\r\n     * Проверяет содержит ли поле только цифры.\r\n     * @param {HTMLInputElement} field Поле, которое надо проверить.\r\n     * @returns {string|null} Строку с ошибкой или null, если ошибки не было.\r\n     */\r\n    mustContainNumbers(field) {\r\n        return /^\\d+$/.test(field.value) ? null : 'Поле должно содержать только буквы';\r\n    },\r\n\r\n\r\n    /**\r\n     * Проверяет содержит ли поле только буквы.\r\n     * @param {HTMLInputElement} field Поле, которое надо проверить.\r\n     * @returns {string|null} Строку с ошибкой или null, если ошибки не было.\r\n     */\r\n    mustContainLetters(field) {\r\n        // Если ошибок не было отправляем null.\r\n        return /^[а-яА-Яa-zA-ZёЁ]+$/.test(field.value) ? null : 'Поле должно содержать только буквы';\r\n    },\r\n\r\n    /**\r\n     * Проверяет удовлетворять ли  шаблону.\r\n     * @param {HTMLInputElement} field Поле, которое надо проверить.\r\n     * @param {Array} args Массив с аргументами.\r\n     * @returns {string|null} Строку с ошибкой или null, если ошибки не было.\r\n     */\r\n    inTemplate(field, args) {\r\n        // Если ошибок не было отправляем null.\r\n        //return args[1].test(field.value) ? null : `Поле должно удовлетворять шаблону ${args[0]}.`; // не катит для JSON\r\n        return (new RegExp(args[1], 'i')).test(field.value) ? null : `Поле должно удовлетворять шаблону: ${args[0]}.`;\r\n    },\r\n\r\n    /**\r\n     * Проверяет совпадают ли у двух полей значения.\r\n     * @param {HTMLInputElement} field1 Поле, которое надо проверить.\r\n     * @param {Array} args Массив с аргументами.\r\n     * @returns {string|null} Строку с ошибкой или null, если ошибки не было.\r\n     */\r\n    fieldsCompatible(field1, args) {\r\n        return field1.value !== document.querySelector(args[0]).value ? 'Поля не совпадают.' : null;\r\n    },\r\n};\r\n\r\n/**\r\n * Класс для валидации формы.\r\n * @property {Array} rules Массив с правилами проверки инпутов.\r\n */\r\nclass Form {\r\n    /**\r\n     * Инициализирует форму,ставим обработчик события и правила проверки.\r\n     */\r\n    constructor() {\r\n        this.formEl = null;\r\n        this.rules = null;\r\n        this.selectControlOptions = null;\r\n    }\r\n\r\n    /**\r\n     * Инициализирует форму,ставим обработчик события и правила проверки.\r\n     * @param {string} formName - имя формы\r\n     * @param {string} submitButtonName - имя кнопки отправки\r\n     * @param {string} rulesStorage - путь к хранилищу правил валидации полей\r\n     * @param {string} selectControlOptionsStorage - путь к хранилищу наполнения селекшторов\r\n     */\r\n    init(formName, submitButtonName, rulesStorage, selectControlOptionsStorage) {\r\n        // Находим форму и ставим обработчик события, при отправки формы вызываем метод validate.\r\n        this.formEl = document.querySelector(formName);\r\n        this.formEl.addEventListener(submitButtonName, e => this.formSubmit(e));\r\n\r\n        // Ставим все правила для проверки формы.\r\n        const request = new JSONRequest();\r\n        request.getData(rulesStorage, (data) => this.rules = data);\r\n        request.getData(selectControlOptionsStorage, (data) => {\r\n            this.selectControlOptions = data;\r\n            this.fillSelects();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Метод, который запускается перед отправкой формы.\r\n     * @param {Event} e Событие отправки формы.\r\n     */\r\n    formSubmit(e) {\r\n        // временно отключаю валидацию, чтобы не мешала\r\n        if (!this.validate()) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Валидирует форму.\r\n     */\r\n    validate() {\r\n        // Изначально считаем что валидация успешна, если кто-то провалит, то поставим false.\r\n        let isValid = true;\r\n        // Перебираем все правила.\r\n        for (let rule of this.rules) {\r\n            // Получаем элемент, который проверяем.\r\n            const inputEl = document.querySelector(rule.selector);\r\n            // Перебираем все методы, по которым надо провалидировать поле.\r\n            for (let method of rule.methods) {\r\n                // Получаем ошибку после выполнения метода.\r\n                const errMessage = validationMethods[method.name](inputEl, method.args);\r\n                if (errMessage) {\r\n                    // Если ошибка была, то меняем стили поля на не прошедшее валидацию.\r\n                    this.setInvalidField(inputEl, errMessage);\r\n                    // Ставим флаг что валидация провалилась в форме.\r\n                    isValid = false;\r\n                    // Больше не нужно проверять поле, если одну ошибку у поля уже получили.\r\n                    break;\r\n                } else {\r\n                    // Если сообщения об ошибке не было, значит валидация пройдена.\r\n                    this.setValidField(inputEl);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Возвращаем общий результат формы, была пройдена валидация всеми или нет.\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает класс провала валидации инпуту и ставит сообщение о том, почему валидация провалена.\r\n     * @param {Element} inputEl Элемент инпута, который провалил валидацию.\r\n     * @param {string} message Сообщение об ошибке.\r\n     */\r\n    setInvalidField(inputEl, message) {\r\n        // Ставим is-invalid класс и убираем is-valid у инпута.\r\n        const cl = inputEl.classList;\r\n        cl.remove('is-valid');\r\n        cl.add('is-invalid');\r\n\r\n        // Если не стояло уже сообщения об ошибке, то создаем и вставляем переданное сообщение как текст.\r\n        let hintWrap = inputEl.parentNode.querySelector('.invalid-feedback');\r\n        if (!hintWrap) {\r\n            hintWrap = document.createElement('div');\r\n            hintWrap.classList.add('invalid-feedback');\r\n            inputEl.parentNode.appendChild(hintWrap);\r\n        }\r\n\r\n        hintWrap.textContent = message;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает класс прохождения валидации инпуту и убирает сообщение о провале валидации, если такое было.\r\n     * @param {Element} inputEl\r\n     */\r\n    setValidField(inputEl) {\r\n        // Ставим is-valid класс и убираем is-invalid у инпута.\r\n        const cl = inputEl.classList;\r\n        cl.remove('is-invalid');\r\n        cl.add('is-valid');\r\n    }\r\n\r\n    /**\r\n     * Устанавливает класс прохождения валидации инпуту и убирает сообщение о провале валидации, если такое было.\r\n     */\r\n    fillSelects() {\r\n        for (let control of this.selectControlOptions) {\r\n            const $el = $(control.id),\r\n                content = control.content;\r\n            switch (control.type) {\r\n                case 'options':\r\n                    for (let option of content) {\r\n                        $el.append(`<option value=\"${option}\">${option}</option>`);\r\n                    }\r\n                    break;\r\n                case 'autocomplete':\r\n                    $el.autocomplete({\r\n                        minLength: 3,\r\n                        source: content\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass JSONRequest {\r\n    getData(url, callback) {\r\n        $.ajax({\r\n            url: url,\r\n            type: 'GET',\r\n            dataType: 'json',\r\n            success: callback,\r\n            error: function (e) {\r\n                Request.showMessage('#comments', `Can't get data from ${url}`); \r\n                //console.log(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    getDataFromServer(url, callback) {\r\n        $.ajax({\r\n            url: url,\r\n            type: 'GET',\r\n            dataType: 'json',\r\n            success: callback,\r\n            error: function (e) {\r\n                console.log(e);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Review posting class - [Задача 5.2]\r\n */\r\nclass Review {\r\n    /**\r\n     * constructor\r\n     * @param {string} url - JSON url\r\n     * @param {string} errorSelector - error message dialog selector\r\n     */\r\n    constructor(url, errorSelector) {\r\n        this.url = url;\r\n        this.errorSelector = errorSelector;\r\n        this.initHandlers();\r\n    }\r\n\r\n    /**\r\n     * inits all needed buttons handlers\r\n     */\r\n    initHandlers() {\r\n        $('#comments').on('click', '.vanish', (e) => {\r\n            const commentID = $(e.target).attr('data-id');\r\n            this.delete(commentID);\r\n            e.preventDefault();\r\n        });\r\n\r\n        $('#comments').on('click', '.prove', (e) => {\r\n            const commentID = $(e.target).attr('data-id');\r\n            this.submit(commentID);\r\n            e.preventDefault();\r\n        });\r\n\r\n        $('#submit').on('click', (e) => {\r\n            this.add($('#user-name').val(), $('#comment-text').val());\r\n            //this.change($('#user-name').val(), $('#comment-text').val(), $('#comment-id').val());\r\n            e.preventDefault();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Renders review list\r\n     * \r\n     */\r\n    render() {\r\n        const $div = $('#comments');\r\n        $div.empty();\r\n        $.get(this.url, {}, function (comments) {\r\n            comments.forEach(function (item) {\r\n                const $commentArea = $div.append(\r\n                    $('<div />', {\r\n                        class: 'form-row mt-4 w-100'\r\n                    }));\r\n                $commentArea.append(\r\n                    $('<div />', {\r\n                        class: `alert alert-${$.parseJSON(item.approved) ? 'success' : 'warning'} form-row mt-4 w-100`\r\n                    })\r\n\r\n                    .append(\r\n                        $('<div />', {\r\n                            text: 'User name: ' + item.user,\r\n                            class: 'form-group col-md-7'\r\n                        })\r\n                    )\r\n                    .append(\r\n                        $('<div />', {\r\n                            text: 'Comment ID: ' + item.id,\r\n                            class: 'form-group col-md-5'\r\n                        })\r\n                    )\r\n                    .append(\r\n                        $('<div />', {\r\n                            text: item.text,\r\n                            class: 'form-group col-md-12 w-100'\r\n                        })\r\n                    ));\r\n\r\n                if ($.parseJSON(item.approved)) {\r\n                    $commentArea.append(\r\n                        $('<div />', {\r\n                            class: 'col-md-7'\r\n                        }));\r\n                } else {\r\n                    $commentArea.append(\r\n                            $('<button />', {\r\n                                class: 'btn btn-outline-success col-md-5 prove',\r\n                                type: 'button',\r\n                                'data-id': item.id,\r\n                                text: 'Prove'\r\n                            }))\r\n                        .append(\r\n                            $('<div />', {\r\n                                class: 'col-md-2'\r\n                            })\r\n                        );\r\n                }\r\n                $commentArea\r\n                    .append(\r\n                        $('<button />', {\r\n                            class: 'btn btn-outline-danger col-md-5 vanish',\r\n                            type: 'button',\r\n                            'data-id': item.id,\r\n                            text: 'Vanish'\r\n                        })\r\n                    );\r\n\r\n            });\r\n        }, 'json');\r\n    }\r\n\r\n    /**\r\n     * Adds comment\r\n     * @param {string} user - user name\r\n     * @param {string} text - review text\r\n     */\r\n    add(user, text) {\r\n        const comment = {\r\n            user: user,\r\n            text: text,\r\n            approved: false\r\n        };\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: this.url,\r\n            data: comment,\r\n            success: () => this.render(),\r\n            error: () => this.showMessage(this.errorSelector, 'Sorry. An error occurred while adding the comment. Try later.', 'Error!'),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Changes comment\r\n     * @param {string} user - user name\r\n     * @param {string} text - review text\r\n     * @param {string} id - comment ID \r\n     */\r\n    change(user, text, id) {\r\n        const comment = {\r\n            id: id,\r\n            user: user,\r\n            text: text,\r\n            approved: false\r\n        };\r\n\r\n        if (id !== \"\") {\r\n            // check if a comment with that ID appears - change comment, else add new\r\n            const foundCommentURL = this.url + id;\r\n            $.get(foundCommentURL, {}, (comments) => {\r\n                $.ajax({\r\n                    type: 'PATCH',\r\n                    url: foundCommentURL,\r\n                    data: comment,\r\n                    success: () => this.render(),\r\n                    error: () => this.showMessage(this.errorSelector, 'Sorry. An error occurred while changing the comment. Try later.', 'Error!'),\r\n                });\r\n            }, 'json').fail(() => {\r\n                $.ajax({\r\n                    type: 'POST',\r\n                    url: this.url,\r\n                    data: comment,\r\n                    success: () => this.render(),\r\n                    error: () => this.showMessage(this.errorSelector, 'Sorry. An error occurred while adding the comment. Try later.', 'Error!'),\r\n                })\r\n            });\r\n        } else {\r\n            this.add(user, text);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Submites comment\r\n     * @param {string} id - comment ID\r\n     */\r\n    submit(id) {\r\n        $.ajax({\r\n            type: 'PATCH',\r\n            url: this.url + id,\r\n            data: {\r\n                approved: true\r\n            },\r\n            success: () => this.render(),\r\n            error: () => this.showMessage(this.errorSelector, 'Sorry. An error occurred while submitting the comment. Try later.', 'Error!'),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes comment\r\n     * @param {string} id - comment ID\r\n     */\r\n    delete(id) {\r\n        $.ajax({\r\n            type: 'DELETE',\r\n            url: this.url + id,\r\n            success: () => this.render(),\r\n            error: () => this.showMessage(this.errorSelector, 'Sorry. An error occurred while deleting the comment. Try later.', 'Error!'),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Shows message dialog\r\n     * @param {string} id - selector name\r\n     * @param {string} message - message text\r\n     * @param {string} caption - dialog caption\r\n     */\r\n    showMessage(id, message, caption) {\r\n        $(id).dialog({\r\n                title: caption\r\n            })\r\n            .text(message);\r\n    }\r\n}\r\n\r\n$(document).ready(() => {\r\n    // Инициализируем форму.\r\n    const form = new Form();\r\n    //form.init('.my-form', 'submit', 'rules.json', 'selects_content.json');\r\n    form.init('.my-form', 'submit', 'http://localhost:3000/rules/', 'http://localhost:3000/selects_content/');\r\n\r\n    // задача 5.2\r\n    const review = new Review('http://localhost:3000/comments/', '#message');\r\n    review.render();\r\n    // задача 6.2\r\n    //review.showMessage('#message', 'Hi!', 'Error');\r\n\r\n    // задача 6.1 датапикер, эффект \"Bounce\"\r\n    $(\"#birthday\").datepicker({\r\n        showAnim: \"bounce\"\r\n    });\r\n\r\n    // задача 6.3\r\n    const gallery = new Gallery({\r\n        carouselContent: $(\".carousel__content\")\r\n    });\r\n    gallery.init();\r\n\r\n});"]}